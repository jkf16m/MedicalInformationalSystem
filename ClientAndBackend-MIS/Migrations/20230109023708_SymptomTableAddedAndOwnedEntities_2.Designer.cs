// <auto-generated />
using System;
using ClientAndBackend_MIS.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClientAndBackendMIS.Migrations
{
    [DbContext(typeof(MISContext))]
    [Migration("20230109023708_SymptomTableAddedAndOwnedEntities_2")]
    partial class SymptomTableAddedAndOwnedEntities2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClientAndBackend_MIS.Entities.ConsultationRoomSection.ConsultationRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("ConsultationRoom");
                });

            modelBuilder.Entity("ClientAndBackend_MIS.Entities.DoctorSection.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProfessionalLicenseNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("ClientAndBackend_MIS.Entities.IllnessSection.Illness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Illness");
                });

            modelBuilder.Entity("ClientAndBackend_MIS.Entities.PatientSection.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("ClientAndBackend_MIS.Entities.SymptomSection.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Causes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IllnessId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IllnessId");

                    b.ToTable("Symptom");
                });

            modelBuilder.Entity("ClientAndBackend_MIS.Entities.DoctorSection.Doctor", b =>
                {
                    b.OwnsOne("ClientAndBackend_MIS.Entities.Shared.Address", "LivingAddress", b1 =>
                        {
                            b1.Property<int>("DoctorId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DoctorId");

                            b1.ToTable("Doctor");

                            b1.WithOwner()
                                .HasForeignKey("DoctorId");
                        });

                    b.OwnsOne("ClientAndBackend_MIS.Entities.Shared.PersonName", "Name", b1 =>
                        {
                            b1.Property<int>("DoctorId")
                                .HasColumnType("int");

                            b1.Property<string>("FatherLastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MiddleName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MotherLastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DoctorId");

                            b1.ToTable("Doctor");

                            b1.WithOwner()
                                .HasForeignKey("DoctorId");
                        });

                    b.OwnsOne("ClientAndBackend_MIS.Entities.Shared.Money", "Salary", b1 =>
                        {
                            b1.Property<int>("DoctorId")
                                .HasColumnType("int");

                            b1.Property<int>("Centavos")
                                .HasColumnType("int");

                            b1.Property<int>("Pesos")
                                .HasColumnType("int");

                            b1.HasKey("DoctorId");

                            b1.ToTable("Doctor");

                            b1.WithOwner()
                                .HasForeignKey("DoctorId");
                        });

                    b.Navigation("LivingAddress")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Salary")
                        .IsRequired();
                });

            modelBuilder.Entity("ClientAndBackend_MIS.Entities.IllnessSection.Illness", b =>
                {
                    b.HasOne("ClientAndBackend_MIS.Entities.PatientSection.Patient", null)
                        .WithMany("Illnesses")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("ClientAndBackend_MIS.Entities.PatientSection.Patient", b =>
                {
                    b.HasOne("ClientAndBackend_MIS.Entities.DoctorSection.Doctor", null)
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId");

                    b.OwnsOne("ClientAndBackend_MIS.Entities.Shared.Address", "LivingAddress", b1 =>
                        {
                            b1.Property<int>("PatientId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patient");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("ClientAndBackend_MIS.Entities.Shared.PersonName", "Name", b1 =>
                        {
                            b1.Property<int>("PatientId")
                                .HasColumnType("int");

                            b1.Property<string>("FatherLastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MiddleName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MotherLastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patient");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.Navigation("LivingAddress")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("ClientAndBackend_MIS.Entities.SymptomSection.Symptom", b =>
                {
                    b.HasOne("ClientAndBackend_MIS.Entities.IllnessSection.Illness", null)
                        .WithMany("Symptoms")
                        .HasForeignKey("IllnessId");
                });

            modelBuilder.Entity("ClientAndBackend_MIS.Entities.DoctorSection.Doctor", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("ClientAndBackend_MIS.Entities.IllnessSection.Illness", b =>
                {
                    b.Navigation("Symptoms");
                });

            modelBuilder.Entity("ClientAndBackend_MIS.Entities.PatientSection.Patient", b =>
                {
                    b.Navigation("Illnesses");
                });
#pragma warning restore 612, 618
        }
    }
}
